"use strict";var types=require("types.js"),BatchValidator=function(t){this.setErrorHandler(t),this.validations={}};BatchValidator.prototype.setErrorHandler=function(t){return this.errorHandler=types.forceFunction(t),this},BatchValidator.prototype.hasKey=function(t){return this.validations.hasOwnProperty(t)},BatchValidator.prototype.addOne=function(t,r){return types.notString(t)?(this.errorHandler("key: ",t,"is not of type string, cannot add validation!"),!1):this.hasKey(t)?(this.errorHandler("key: ",t,"already exists with regexp:",this.validations[t],"cannot add!"),!1):(this.validations[t]=types.notRegExp(r)?r:types.forceRegExp(r),!0)},BatchValidator.prototype.add=function(t,r){var e=!1;if(types.isObject(t)){for(var a in t)this.addOne(a,t[a])||(e=!0);return!e}return this.addOne(t,r)},BatchValidator.prototype.validateOne=function(t,r){if(!this.hasKey(t))return this.errorHandler("cannot validate non-existing key:",t),null;var e=this.validations[t],a=types.isString(r)?'"'+r+'"':r;if(types.notRegExp(e)){if(e===r)return!0}else if(e.test(r))return!0;return this.errorHandler("value: "+a+" did not pass "+t+"!",{key:t,value:r,regexp:this.validations[t]}),!1},BatchValidator.prototype.validate=function(t,r){if(types.notArray(t))return this.validateOne(t,r);var e=!0;for(var a in t){var i=t[a];if(types.notObject(i))return this.errorHandler("invalid or non-object type encountered in validations!"),null;var n=Object.keys(i)[0];if(!this.validateOne(n,i[n])&&(e=!1,!r))break}return e},module.exports=BatchValidator;